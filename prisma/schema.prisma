// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Server {
  id            Int       @id @default(autoincrement())
  serverId      String    @unique
  prefix        String    @default("-")
}

model Player {
  // Info things
  id            Int       @id @default(autoincrement())
  discordId     String    @unique
  username      String
  discriminator String
  pfp           String
  // Location
  floor         Int      @default(1)
  region        String   @default("slime fields")
  // Inventory and character
  inventory     Inventory[]
  attacks       Attack[]
  merchantStock merchantStock[]
  skills        Skill[]
  level         Int      @default(0)
  xp            Int      @default(0)
  marks         Int      @default(0) 
  health        Int      @default(10)
  maxHealth     Int      @default(10)
  // Equipment
  head          String?
  torso         String?
  legs          String?
  feet          String?
  hand          String?
  // Stats
  strength      Int      @default(0)
  defence       Int      @default(0)
  arcane        Int      @default(0)
  // Misc
  inCombat      Boolean  @default(false)
  canAttack     Boolean  @default(true)
  fighting      Int?
  unlockedCommands String[]
  statpoints   Int       @default(0)
}

model Skill {
  id            Int       @id @default(autoincrement())
  player        Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      Int
  name          String
  level         Int       @default(0)
  xp            Int       @default(0)
}

model Inventory {
  id            Int       @id @default(autoincrement())
  player        Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      Int
  name          String
  quantity      Int
//  equipSlot     String?
  equipped      Boolean   @default(false)
}

model merchantStock {
  id            Int       @id @default(autoincrement())
  player        Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      Int
  itemName      String
  stock         Int
  floor         Int
}

model Attack {
  id            Int       @id @default(autoincrement())
  player        Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      Int
  name          String
  remCooldown   Int       @default(0)
}

model Item {
  id            Int       @id @default(autoincrement())
  name          String
  category      String
  description   String
  price         Int?
}

model Enemy {
  id            Int       @id @default(autoincrement())
  name          String
  health        Int
  fighting      String?
}

model enemyType {
  id            Int     @id @default(autoincrement())
  name          String
  health        Int     @default(1)
  strength      Int     @default(1)
  defense       Int     @default(1)
  attribute     String[]
  weak          String[]
}

//model Region {
//  id            Int       @id @default(autoincrement())
//  areas         Area[]
//  name          String    @unique
//  minLevel      Int       @default(0)
//}

// model Exploration {
//   id            Int       @id @default(autoincrement())
//   //player        Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
//   playerId      Int
//   areaId        Int
//   found         Json
// }

// model Area {
//   id            Int       @id @default(autoincrement())
//   region        Region    @relation(fields: [regionId], references: [id])
//   regionId      Int
//   name          String    @unique
//   minLevel      Int       @default(0)
//   danger        Boolean   @default(false)
//   shop          Boolean   @default(false)
//   activities    Json
//   enemies       Json
//   exploration   Json
// }