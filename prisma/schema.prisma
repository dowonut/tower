// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Server {
  id       Int    @id @default(autoincrement())
  serverId String @unique
  prefix   String @default("-")
}

model User {
  id               Int      @id @default(autoincrement())
  discordId        String   @unique
  username         String
  discriminator    String
  pfp              String
  players          Player[]
  unlockedCommands String[]
  // Settings
  embed_color      String   @default("2b2d31") // Their default embed color.
}

model Player {
  // Info things
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  guildId       String // Which guild the player is associated with.
  // Location
  floor         Int             @default(1)
  region        String          @default("slime fields")
  // Inventory and character
  inventory     Inventory[]
  attacks       Attack[]
  merchantStock MerchantStock[]
  skills        Skill[]
  recipes       Recipe[]
  crafts        Craft[]
  exploration   Exploration[]
  passives      Passive[]
  level         Int             @default(0)
  xp            Int             @default(0)
  marks         Int             @default(0)
  health        Int             @default(10)
  // Equipment
  head          String?
  torso         String?
  legs          String?
  feet          String?
  hand          String?
  // Stats
  strength      Int             @default(0)
  defense       Int             @default(0)
  arcane        Int             @default(0)
  vitality      Int             @default(0)
  // Misc
  traitPoints   Int             @default(0)
  party         Party?          @relation(fields: [partyId], references: [id])
  partyId       Int?
  // Combat
  encounter     Encounter?      @relation(fields: [encounterId], references: [id])
  encounterId   Int?
  SV            Int?
  dead          Boolean         @default(false)

  @@unique([guildId, userId])
}

// Unlock player crafting recipes
model Recipe {
  id       Int    @id @default(autoincrement())
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int
  name     String

  @@unique([playerId, name])
}

// Ongoing player crafts
model Craft {
  id       Int      @id @default(autoincrement())
  player   Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int
  name     String
  started  DateTime
  time     Int
}

// Player skills and their progression
model Skill {
  id       Int    @id @default(autoincrement())
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int
  name     String
  level    Int    @default(0)
  xp       Int    @default(0)

  @@unique([playerId, name])
}

// Player item inventory
model Inventory {
  id           Int           @id @default(autoincrement())
  player       Player        @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId     Int
  name         String
  quantity     Int
  added        DateTime?
  equipped     Boolean       @default(false)
  crafted      Boolean       @default(false)
  nickname     String?
  enhancements Enhancement[]
  // Equipment
  level        Int?          @default(1)
  grade        String?       @default("common")
  materials    String[]      @default(["steel"])
}

// Item enhancements 
model Enhancement {
  id     Int       @id @default(autoincrement())
  item   Inventory @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int
  name   String
  level  Int       @default(1)
}

// Player merchant stocks
model MerchantStock {
  id        Int    @id @default(autoincrement())
  player    Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  Int
  itemName  String
  stock     Int
  floor     Int
  restocked Int?
}

// Player exploration tracking
model Exploration {
  id        Int     @id @default(autoincrement())
  player    Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  Int
  floor     Int
  type      String
  name      String?
  category  String?
  remaining Int?
  restocked Int?
}

// Player attacks
model Attack {
  id          Int    @id @default(autoincrement())
  player      Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId    Int
  name        String
  level       Int    @default(1)
  remCooldown Int    @default(0)

  @@unique([playerId, name])
}

// Player passive stat modifiers
model Passive {
  id       Int    @id @default(autoincrement())
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int
  /// Source of the passive. ("weapon", "consumable", etc)
  source   String
  /// Player stat to target. ("ATK", "MAG", etc)
  target   String
  /// How to apply the value. ("flat" or "percent")
  type     String @default("flat")
  /// Value to apply.
  value    Int
  /// How long the passive lasts, defined as combat turns.
  duration Int?
}

// Enemy tracking
model Enemy {
  id          Int           @id @default(autoincrement())
  name        String
  number      Int           @default(0)
  health      Int
  attacks     enemyAttack[]
  encounter   Encounter?    @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  encounterId Int?
  SV          Int?
  dead        Boolean       @default(false)
}

model enemyAttack {
  id          Int    @id @default(autoincrement())
  enemy       Enemy  @relation(fields: [enemyId], references: [id], onDelete: Cascade)
  enemyId     Int
  name        String
  remCooldown Int    @default(0)

  @@unique([enemyId, name])
}

// Combat encounter
model Encounter {
  id                  Int      @id @default(autoincrement())
  players             Player[]
  enemies             Enemy[]
  turnsPassed         Int      @default(0)
  currentPlayer       Int?
  discordMessageId    String?
  discordChannelId    String?
  lastAttackMessageId String?
}

// Player parties
model Party {
  id      Int      @id @default(autoincrement())
  players Player[]
  leader  Int
  name    String?  @unique
}

// OUTDATED 
// model Item {
//   id            Int       @id @default(autoincrement())
//   name          String
//   category      String
//   description   String
//   price         Int?
// }

// OUTDATED
// model enemyType {
//   id            Int     @id @default(autoincrement())
//   name          String
//   health        Int     @default(1)
//   strength      Int     @default(1)
//   defense       Int     @default(1)
//   attribute     String[]
//   weak          String[]
// }

//model Region {
//  id            Int       @id @default(autoincrement())
//  areas         Area[]
//  name          String    @unique
//  minLevel      Int       @default(0)
//}

// model Exploration {
//   id            Int       @id @default(autoincrement())
//   //player        Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
//   playerId      Int
//   areaId        Int
//   found         Json
// }

// model Area {
//   id            Int       @id @default(autoincrement())
//   region        Region    @relation(fields: [regionId], references: [id])
//   regionId      Int
//   name          String    @unique
//   minLevel      Int       @default(0)
//   danger        Boolean   @default(false)
//   shop          Boolean   @default(false)
//   activities    Json
//   enemies       Json
//   exploration   Json
// }
